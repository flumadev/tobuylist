// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  totalBalance  Int            @default(0)
  totalLists    Int            @default(0)
  followers     Followers[]
  Bookmark      Bookmark[]
  List          List[]
  Collaborator  Collaborator[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Followers {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [id])
  userId      String
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  listId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  List      List     @relation(fields: [listId], references: [id])
}

model List {
  id             String           @id @default(uuid())
  name           String
  userId         String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  User           User             @relation(fields: [userId], references: [id])
  totalValue     Int              @default(0)
  likes          Int              @default(0)
  ListItems      ListItem[]
  Bookmarks      Bookmark[]
  TagList        TagList[]
  Collaborator   Collaborator[]
  ListShareToken ListShareToken[]
}

model ListItem {
  id        String   @id @default(cuid())
  image     String?
  name      String
  price     Int?
  quantity  Int?
  storeUrl  String?
  storeName String?
  listId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  List      List     @relation(fields: [listId], references: [id])
}

model Tag {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  TagList   TagList[]
}

model TagList {
  id        String   @id @default(cuid())
  tagId     String
  listId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Tag       Tag      @relation(fields: [tagId], references: [id])
  List      List     @relation(fields: [listId], references: [id])
}

model Collaborator {
  id        String   @id @default(cuid())
  userId    String
  listId    String
  canEdit   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  List      List     @relation(fields: [listId], references: [id])
}

model ListShareToken {
  id        String    @id @default(cuid())
  listId    String
  token     String    @unique
  createdAt DateTime  @default(now())
  expiresAt DateTime?
  updatedAt DateTime  @updatedAt
  List      List      @relation(fields: [listId], references: [id])
}

model Logs {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  message   String
  type      String
  userId    String?
}
